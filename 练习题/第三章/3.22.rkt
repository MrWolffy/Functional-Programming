#lang racket
(require r5rs)

(define (make-queue)
  (let ((front-ptr '())
        (rear-ptr '()))
    (define (get-front-ptr) front-ptr)
    (define (get-rear-ptr) rear-ptr)
    (define (set-front-ptr item)
      (set! front-ptr item))
    (define (set-rear-ptr item)
      (set! rear-ptr item))
    (define (dispatch m)
      (cond ((eq? m 'front-ptr) get-front-ptr)
            ((eq? m 'rear-ptr) get-rear-ptr)
            ((eq? m 'set-front-ptr) set-front-ptr)
            ((eq? m 'set-rear-ptr) set-rear-ptr)
            (else (error "no such operation for queue" m))))
    dispatch))



(define (empty-queue? queue)
  (null? ((queue 'front-ptr))))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (queue 'front-ptr))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           ((queue 'set-front-ptr) new-pair)
           ((queue 'set-rear-ptr) new-pair)
           queue)
          (else
           (set-cdr! ((queue 'rear-ptr)) new-pair)
           ((queue 'set-rear-ptr) new-pair)
           queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else ((queue 'set-front-ptr)
               (cdr ((queue 'front-ptr))))
              queue)))

