#lang racket
(define (A)
  (define init '())
  (define status 'uc)
  (define (cons x)
    (if (eq? status 'uc)
        (begin (set! init x) (set! status 'c))
        (displayln "object has been constructed!")))
  (define (dest)
    (if (eq? status 'd)
        (displayln "object has been destructed!")
        (set! status 'd)))
  (define (setx x)
    (cond ((eq? status 'uc)
           (displayln "object hasn't been constructed!"))
          ((eq? status 'c)
           (set! init x))
          ((eq? status 'd)
           (displayln "object has been destructed!"))))
  (define (getx)
    (cond ((eq? status 'uc)
           (displayln "object hasn't been constructed!"))
          ((eq? status 'c) init)
          ((eq? status 'd)
           (displayln "object has been destructed!"))))
  (define (helper op)
    (cond ((eq? op 'getx) (getx))
          ((eq? op 'setx) setx)
          ((eq? op 'dest) (dest))
          (else (cons op))))
  helper)

(define (delete a)
  (a 'dest))
(define a (A))
(a 2)
(a 4)
(display (a 'getx))
(newline)
((a 'setx) 1)
(display (a 'getx))
(newline)
(define b (A))
((b 'setx) 2)
(b 5)
(display (b 'getx))
(newline)
(delete a)
(delete b)
(delete a)
(b 'getx)