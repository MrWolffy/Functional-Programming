#lang racket
(require r5rs)

(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item)
  (set-car! queue item))
(define (set-rear-ptr! queue item)
  (set-cdr! queue item))

(define (empty-queue? queue)
  (null? (front-ptr queue)))
(define (make-queue) (cons '() '()))
(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (car (front-ptr queue))))
(define (insert-queue! queue item)
  (let ((new-pair (cons item '())))
    (cond ((empty-queue? queue)
           (set-front-ptr! queue new-pair)
           (set-rear-ptr! queue new-pair)
           queue)
          (else
           (set-cdr! (rear-ptr queue) new-pair)
           (set-rear-ptr! queue new-pair)
           queue))))
(define (delete-queue! queue)
  (cond ((empty-queue? queue)
         (error "DELETE! called with an empty queue" queue))
        (else (set-front-ptr! queue (cdr (front-ptr queue)))
              queue)))


(define visited (make-vector 100010 0))
(define qu (make-queue))

(define (find k)
  ;(displayln qu)
  (let ((front (front-queue qu)))
    (let ((x (car front))
          (time (cdr front)))
      (if (= x k)
          time
          (begin (vector-set! visited x time)
                 (delete-queue! qu)
                 (if (and (> (- x 1) 0)
                          (= (vector-ref visited (- x 1)) 0))
                     (insert-queue! qu (cons (- x 1) (+ time 1)))
                     (void))
                 (if (and (< (+ x 1) 100005)
                          (= (vector-ref visited (+ x 1)) 0))
                     (insert-queue! qu (cons (+ x 1) (+ time 1)))
                     (void))
                 (if (and (< (* x 2) 100005)
                          (= (vector-ref visited (* x 2)) 0))
                     (insert-queue! qu (cons (* x 2) (+ time 1))))
                 (find k))))))


(define (myloop)
  (let ((n (read))
        (k (read)))
    (if (eq? n eof)
        (void)
        (begin
          (if (< k n)
              (displayln (- n k))
              (begin
                (insert-queue! qu (cons n 0))
                (displayln (find k))
                (set! visited (make-vector 100010 0))))
          (myloop)))))

(myloop)